diff --git a/services/core_service/src/common_event/start_event.rs b/services/core_service/src/common_event/start_event.rs
index 2e5ac1647b12be4680c68cd33980047dad53ba40..df3cd33aeee27d16acb8e6e5b4e79493b47abee8 100644
--- a/services/core_service/src/common_event/start_event.rs
+++ b/services/core_service/src/common_event/start_event.rs
@@ -24,7 +24,7 @@ use asset_log::{loge, logi, logw};
 use system_ability_fwk::cxx_share::SystemAbilityOnDemandReason;
 
 use crate::{
-    common_event::listener, unload_handler::DELAYED_UNLOAD_TIME_IN_SEC, unload_sa, PackageInfo, PackageInfoFfi,
+    common_event::listener, PackageInfo, PackageInfoFfi,
     WantParser,
 };
 
@@ -186,5 +186,4 @@ fn process_common_event_async(reason: SystemAbilityOnDemandReason) {
 
 pub(crate) fn handle_common_event(reason: SystemAbilityOnDemandReason) {
     ylong_runtime::spawn_blocking(move || process_common_event_async(reason));
-    unload_sa(DELAYED_UNLOAD_TIME_IN_SEC as u64);
 }
diff --git a/services/core_service/src/lib.rs b/services/core_service/src/lib.rs
index 0dadf322c012f2af59f1445ca56b37f1b22c3c6a..a04d33a09e6b039655f06d279ba1c0e5d08e49f6 100644
--- a/services/core_service/src/lib.rs
+++ b/services/core_service/src/lib.rs
@@ -17,15 +17,15 @@
 
 use ipc::parcel::MsgParcel;
 use samgr::manage::SystemAbilityManager;
+use unload_handler::DELAYED_UNLOAD_TIME_IN_SEC;
 use std::{
-    fs,
-    time::{Duration, Instant},
+    fs, time::{Duration, Instant}
 };
 use system_ability_fwk::{
     ability::{Ability, Handler},
     cxx_share::SystemAbilityOnDemandReason,
 };
-use ylong_runtime::{builder::RuntimeBuilder, time::sleep};
+use ylong_runtime::builder::RuntimeBuilder;
 
 use asset_common::{AutoCounter, CallingInfo, ConstAssetBlob, ConstAssetBlobArray, Counter};
 use asset_crypto_manager::crypto_manager::CryptoManager;
@@ -46,7 +46,7 @@ mod unload_handler;
 use sys_event::upload_system_event;
 use trace_scope::TraceScope;
 
-use crate::unload_handler::{UnloadHandler, DELAYED_UNLOAD_TIME_IN_SEC, SEC_TO_MILLISEC};
+use crate::unload_handler::SEC_TO_MILLISEC;
 
 struct AssetAbility;
 
@@ -83,13 +83,18 @@ impl PackageInfo {
     }
 }
 
-pub(crate) fn unload_sa(duration: u64) {
-    let unload_handler = UnloadHandler::get_instance();
-    unload_handler.lock().unwrap().update_task(ylong_runtime::spawn(async move {
-        sleep(Duration::from_secs(duration)).await;
-        logi!("[INFO]Start unload asset service");
-        SystemAbilityManager::unload_system_ability(SA_ID);
-    }));
+pub(crate) fn unload_sa() {
+    ylong_runtime::spawn(async move {
+        loop {
+            ylong_runtime::time::sleep(Duration::from_secs(DELAYED_UNLOAD_TIME_IN_SEC as u64)).await;
+            let counter = Counter::get_instance();
+            if counter.lock().unwrap().count() > 0 {
+                continue;
+            }
+            logi!("[INFO]Start unload asset service");
+            SystemAbilityManager::unload_system_ability(SA_ID);
+        }
+    });
 }
 
 impl Ability for AssetAbility {
@@ -105,6 +110,7 @@ impl Ability for AssetAbility {
 
         let _ = upload_system_event(start_service(handler), &calling_info, start, func_name, &AssetMap::new());
         common_event::handle_common_event(reason);
+        unload_sa();
     }
 
     fn on_active(&self, reason: SystemAbilityOnDemandReason) {
diff --git a/services/core_service/src/stub.rs b/services/core_service/src/stub.rs
index df29254787921a3ab661bd3d57cae6bf340e6a9f..675677e9fcb12070721d44359857da0d85e62731 100644
--- a/services/core_service/src/stub.rs
+++ b/services/core_service/src/stub.rs
@@ -29,7 +29,7 @@ use asset_sdk::{
     AssetError, ErrCode, Result, Tag, Value,
 };
 
-use crate::{unload_handler::DELAYED_UNLOAD_TIME_IN_SEC, unload_sa, AssetService};
+use crate::AssetService;
 
 const REDIRECT_START_CODE: u32 = 200;
 
@@ -61,7 +61,6 @@ impl RemoteStub for AssetService {
             );
             return IPC_SUCCESS as i32;
         }
-        unload_sa(DELAYED_UNLOAD_TIME_IN_SEC as u64);
 
         if code >= REDIRECT_START_CODE {
             return on_extension_request(self, code, data, reply);
diff --git a/services/core_service/src/unload_handler.rs b/services/core_service/src/unload_handler.rs
index ec2617cca8137ebda84c2f07299ee2d76efd916b..52ff4bb9e03404024112ded5b18e4f55684b1905 100644
--- a/services/core_service/src/unload_handler.rs
+++ b/services/core_service/src/unload_handler.rs
@@ -16,33 +16,5 @@
 //! This module is used to Asset service unload handler.
 
 /// Manages the unload request.
-use std::sync::{Arc, Mutex};
-
-use ylong_runtime::task::JoinHandle;
-
-pub(crate) struct UnloadHandler {
-    task: Option<JoinHandle<()>>,
-}
-
 pub(crate) static DELAYED_UNLOAD_TIME_IN_SEC: i32 = 20;
 pub(crate) static SEC_TO_MILLISEC: i32 = 1000;
-
-impl UnloadHandler {
-    fn new() -> Self {
-        Self { task: None }
-    }
-
-    /// Get the single instance of UnloadHandler.
-    pub(crate) fn get_instance() -> Arc<Mutex<UnloadHandler>> {
-        static mut INSTANCE: Option<Arc<Mutex<UnloadHandler>>> = None;
-        unsafe { INSTANCE.get_or_insert_with(|| Arc::new(Mutex::new(UnloadHandler::new()))).clone() }
-    }
-
-    /// update task in unload handler
-    pub(crate) fn update_task(&mut self, new_task: JoinHandle<()>) {
-        if let Some(t) = &self.task {
-            t.cancel();
-        };
-        self.task = Some(new_task);
-    }
-}
