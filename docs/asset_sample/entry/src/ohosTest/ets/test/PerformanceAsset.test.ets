import asset from '@ohos.security.asset';
import { stringToArray, arrayToString, removeAssetPromise, queryAttrPromise,
  addAssetPromiseResult, queryAssetPromiseResult, removeAssetPromiseResult
} from './common'
import { describe, beforeAll, beforeEach, afterEach, afterAll, it, expect } from '@ohos/hypium';
let case_num = 10000
let secret
let base_normal_label = "normal_label"
export default function performanceAssetPromiseTest() {
  describe('performancePromiseTest', () => {
    beforeAll(() => {
    })
    beforeEach(() => {
    })
    afterEach(() => {
    })
    afterAll(() => {
    })
    it('addData', 0, async () => {
      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.ALIAS, new Uint8Array(256))
      attr.set(asset.Tag.SECRET, new Uint8Array(1024))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_3, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_4, stringToArray("normal_label4"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, stringToArray("critical_label1"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, stringToArray("critical_label2"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, stringToArray("critical_label3"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, stringToArray("critical_label4"))
      attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
      expect(await addAssetPromiseResult(attr)).assertEqual(0)
      expect(await removeAssetPromise(arrayToString(new Uint8Array(256)))).assertTrue()

    })

    it('addDatas', 0, async () => {
      let base_alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      let secret

      for (let index = 0; index < case_num; index++) {
        let alias = base_alias.concat(index.toString())
        let attr: asset.AssetMap = new Map();
        attr.set(asset.Tag.ALIAS, stringToArray(alias))
        attr.set(asset.Tag.SECRET, stringToArray(secret))
        let label_normal1 = base_normal_label.concat(Math.floor(index/100).toString())
        let label_normal2 = base_normal_label.concat(Math.floor(index/500).toString())
        attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray(label_normal1))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray(label_normal2))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_3, stringToArray("normal_label3"))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_4, stringToArray("normal_label4"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, stringToArray("critical_label1"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, stringToArray("critical_label2"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, stringToArray("critical_label3"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, stringToArray("critical_label4"))
        attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
        attr.set(asset.Tag.IS_PERSISTENT, true)
        expect(await addAssetPromiseResult(attr)).assertEqual(0)
      }
    })

    it('addFullData', 0, async () => {
      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.ALIAS, new Uint8Array(256))
      attr.set(asset.Tag.SECRET, new Uint8Array(1024))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_3, stringToArray("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_4, stringToArray("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, stringToArray("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, stringToArray("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, stringToArray("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, stringToArray("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"))
      attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
      attr.set(asset.Tag.IS_PERSISTENT, true)
      expect(await addAssetPromiseResult(attr)).assertEqual(0)
      // expect(await removeAssetPromise(arrayToString(new Uint8Array(256)))).assertTrue()
    })

    it('addFullDatas', 0, async () => {
      let base_alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      for (let index = 0; index < case_num; index++) {
        let alias = base_alias.concat(index.toString())
        let attr: asset.AssetMap = new Map();
        attr.set(asset.Tag.ALIAS, stringToArray(alias))
        attr.set(asset.Tag.SECRET, new Uint8Array(1024))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_3, stringToArray("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_4, stringToArray("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, stringToArray("11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, stringToArray("22222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, stringToArray("33333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333"))
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, stringToArray("44444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444"))
        attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
        attr.set(asset.Tag.IS_PERSISTENT, true)
        expect(await addAssetPromiseResult(attr)).assertEqual(0)
      }
    })

    it('normalQueryData', 0, async () => {
      let base_alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'

      for (let index = 0; index < case_num; index++) {
        let alias = base_alias.concat(index.toString())
        let attr: asset.AssetMap = new Map();
        attr.set(asset.Tag.ALIAS, stringToArray(alias))
        await queryAttrPromise(alias)
      }
    })

    it('batchQueryData100', 0, async () => {
      for (let index = 0; index < case_num/10000; index++) {
        let attr: asset.AssetMap = new Map();
        // attr.set(asset.Tag.RETURN_TYPE, asset.ReturnType.ALL)
        let label_normal1 = base_normal_label.concat(Math.floor(index/100).toString())
        attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray(label_normal1))
        await asset.query(attr)
      }
    })

    it('batchQueryData500', 0, async () => {
      for (let index = 0; index < case_num/10000; index++) {
        let attr: asset.AssetMap = new Map();
        let label_normal2 = base_normal_label.concat(Math.floor(index/500).toString())
        attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray(label_normal2))
        await asset.query(attr)
      }
    })

    it('updateData', 0, async () => {
      let base_alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      let attr2: asset.AssetMap = new Map();
      attr2.set(asset.Tag.SECRET, stringToArray(secret2))
      let alias_list = new Array<String>();
      for (let index = 0; index < case_num; index++) {
        let alias = base_alias.concat(index.toString())
        alias_list.push(alias)
        let attr: asset.AssetMap = new Map();
        attr.set(asset.Tag.ALIAS, stringToArray(alias))
        await asset.update(attr, attr2)
      }
    })

    it('deleteData', 0, async () => {
      let base_alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      for (let index = 0; index < case_num; index++) {
        let alias = base_alias.concat(index.toString())
        expect(await removeAssetPromise(alias.toString())).assertTrue()
      }
    })

    it('updateNoExistData', 0, async () => {
      let alias = '111111333111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      let secret
      let attr2: asset.AssetMap = new Map();
      attr2.set(asset.Tag.SECRET, stringToArray(secret2))
      let alias_list = new Array<String>();
      alias_list.push(alias)
      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.ALIAS, stringToArray(alias))
      attr.set(asset.Tag.SECRET, stringToArray(secret))
      await asset.update(attr, attr2)
    })

    it('updateExistData', 0, async () => {
      let alias = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      let secret = '111'
      let secret2  ='222'
      let attr2: asset.AssetMap = new Map();
      attr2.set(asset.Tag.SECRET, stringToArray(secret2))

      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.ALIAS, stringToArray(alias))
      attr.set(asset.Tag.SECRET, stringToArray(secret))
      attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
      await addAssetPromiseResult(attr)
      let attr3: asset.AssetMap = new Map();
      attr3.set(asset.Tag.ALIAS, stringToArray(alias))
      attr3.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
      await asset.update(attr3, attr2)
    })

    it('addInvalidData', 0, async () => {
      let alias = '11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'
      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.ALIAS, stringToArray(alias))
      attr.set(asset.Tag.SECRET, new Uint8Array(1024))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_1, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_2, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_3, stringToArray("normal_label3"))
      attr.set(asset.Tag.DATA_LABEL_NORMAL_4, stringToArray("normal_label4"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, stringToArray("critical_label1"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, stringToArray("critical_label2"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, stringToArray("critical_label3"))
      attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, stringToArray("critical_label4"))
      attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
      expect(await addAssetPromiseResult(attr)).assertEqual(0)
      expect(await removeAssetPromise(alias)).assertTrue()
    })

    it('testBatchMaxSize', 0, async () => {
      let base_alias = '1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111'

      let the_case_num = 45
      let label = new Uint8Array(512)

      // insert data
      for (let index = 0; index < the_case_num; index++) {
        let alias = base_alias.concat(index.toString())
        let attr: asset.AssetMap = new Map();
        attr.set(asset.Tag.ALIAS, stringToArray(alias))
        attr.set(asset.Tag.SECRET, new Uint8Array(1024))
        attr.set(asset.Tag.DATA_LABEL_NORMAL_1, label)
        attr.set(asset.Tag.DATA_LABEL_NORMAL_2, label)
        attr.set(asset.Tag.DATA_LABEL_NORMAL_3, label)
        attr.set(asset.Tag.DATA_LABEL_NORMAL_4, label)
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_1, label)
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_2, label)
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_3, label)
        attr.set(asset.Tag.DATA_LABEL_CRITICAL_4, label)
        attr.set(asset.Tag.AUTH_TYPE, asset.AuthType.ANY)
        expect(await addAssetPromiseResult(attr)).assertEqual(0)
      }

      // query data
      let attr: asset.AssetMap = new Map();
      attr.set(asset.Tag.DATA_LABEL_NORMAL_1, label)
      expect(await queryAssetPromiseResult(attr)).assertEqual(0)
      expect(await removeAssetPromiseResult(attr)).assertEqual(0)
    })
  })
}